{
  "active": false,
  "connections": {
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Completed Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "tag?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Items",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Starting Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Starting Message": {
      "main": [
        [
          {
            "node": "Get many workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Return": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get File": {
      "main": [
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If file too large": {
      "main": [
        [
          {
            "node": "Get File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Items": {
      "main": [
        [
          {
            "node": "isDiffOrNew",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew": {
      "main": [
        [
          {
            "node": "Same file - Do nothing",
            "type": "main",
            "index": 0
          },
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Same file - Do nothing": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is different": {
      "main": [
        [
          {
            "node": "Edit existing file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is new": {
      "main": [
        [
          {
            "node": "Create new file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Failed Flows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit existing file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get file data": {
      "main": [
        [
          {
            "node": "If file too large",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Globals": {
      "main": [
        [
          {
            "node": "Get file data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "/": {
      "main": [
        [
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tag?": {
      "main": [
        [
          {
            "node": "/",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Failed Flows": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Same file - Do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is different",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is new",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many workflows": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-22T13:12:40.583Z",
  "id": "RY93B8ZVUx65YTsy",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "e1c48489-32d7-4dda-a493-508287d13726",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -3664,
        -144
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtMinute": 33
            }
          ]
        }
      },
      "id": "94b80767-13b8-4a5f-8116-3f977dbbb173",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -4336,
        -48
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "content": "## Backup to GitHub \nThis workflow will backup all instance workflows to GitHub every 24 hours.\n\nThe files are saved into folders using `YYYY/MM/` for the directory path and `ID.json` for the filename.\n\nThe Repo Owner, Repo Name and Main folder are set using the **Variables** feature but can be replaced with the `Config` node in the subworkflow. \n\nThe workflow runs calls itself to help reduce memory usage, Once the workflow has completed it will send an optional notification to Slack.\n\n### Time to Run\nTested with 1423 workflows on `1.44.1` it took under 30 minutes for the first run and under 12 minutes once the initial run is complete.",
        "height": 417,
        "width": 385,
        "color": 4
      },
      "id": "730a6654-3b2b-4968-944c-7f2182e56e0e",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -5008,
        -400
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Main workflow loop",
        "height": 512,
        "width": 1465,
        "color": 7
      },
      "id": "fa35ec50-3d45-4274-8671-c7a55bce1076",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4448,
        -400
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09CP6FNSES",
          "mode": "list",
          "cachedResultName": "social"
        },
        "text": "=:information_source:  Starting Workflow Backup [{{ $execution.id }}]",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "id": "b1a01bcb-8199-4cc8-9060-14c16daea84b",
      "name": "Starting Message",
      "type": "n8n-nodes-base.slack",
      "position": [
        -4112,
        -144
      ],
      "webhookId": "c02eb407-5547-4aa0-9ebf-46dab67b63b6",
      "typeVersion": 2.2,
      "credentials": {
        "slackOAuth2Api": {
          "id": "tkOMw6LTf1iDpxxB",
          "name": "OAuth - [ j.ahmed.ja7a7@gmail.com ]"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09CP6FNSES",
          "mode": "list",
          "cachedResultName": "social"
        },
        "text": "=âœ… Backup has completed - {{ $('Get many workflows').all().length }} workflows have been processed.",
        "otherOptions": {}
      },
      "id": "deab6ae3-5379-4405-9a26-d588fd4dec61",
      "name": "Completed Notification",
      "type": "n8n-nodes-base.slack",
      "position": [
        -3440,
        -416
      ],
      "webhookId": "a0c6e8c8-5d71-40fa-b02b-63a7ed5726c4",
      "executeOnce": true,
      "typeVersion": 2.2,
      "credentials": {
        "slackOAuth2Api": {
          "id": "tkOMw6LTf1iDpxxB",
          "name": "OAuth - [ j.ahmed.ja7a7@gmail.com ]"
        }
      }
    },
    {
      "parameters": {
        "content": "## Subworkflow",
        "height": 972,
        "width": 3111,
        "color": 6
      },
      "id": "a2c63b48-e391-4140-8a11-5ebb73d9dced",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3600,
        -544
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "93d6a69e-7cb6-43e7-8120-0066455809bd",
      "name": "Return",
      "type": "n8n-nodes-base.set",
      "position": [
        -688,
        192
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "url": "={{ $json.download_url }}",
        "options": {}
      },
      "id": "2024850d-6f0a-4d90-a3d6-116c1cc277b5",
      "name": "Get File",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -2192,
        -240
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.content }}",
              "rightValue": ""
            },
            {
              "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "679ed870-ed95-42ff-aa2a-fe1dfcc9cb27",
      "name": "If file too large",
      "type": "n8n-nodes-base.if",
      "position": [
        -2544,
        -224
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "id": "ade6fa4a-996f-461d-8a9a-12689c5afaa8",
      "name": "Merge Items",
      "type": "n8n-nodes-base.merge",
      "position": [
        -2000,
        -144
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();"
      },
      "id": "c4980da3-2d84-4c66-ac14-b79b3febe015",
      "name": "isDiffOrNew",
      "type": "n8n-nodes-base.code",
      "position": [
        -1824,
        -144
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "bca0d8bc-ec07-498a-b4e8-0af950686bbe",
      "name": "Same file - Do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        -1280,
        -176
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "20dc8da4-4ca1-4f2a-8361-dc2dc457a23f",
      "name": "File is different",
      "type": "n8n-nodes-base.noOp",
      "position": [
        -1408,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "d5c36739-2326-414e-8b60-ea9ef4bd063b",
      "name": "File is new",
      "type": "n8n-nodes-base.noOp",
      "position": [
        -1408,
        192
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "={{ $('Globals').item.json.repo.owner }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Globals').item.json.repo.name }}",
          "mode": "name"
        },
        "filePath": "={{ $('Globals').item.json.repo.path }}{{ $('Loop Over Items').item.json.name }}/{{ $('Loop Over Items').item.json.name }}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{ $('Loop Over Items').item.json.id }} -{{ $('Loop Over Items').item.json.name }} ({{$json.github_status}})"
      },
      "id": "09804d41-43f7-4cc4-b79f-ad050527a819",
      "name": "Create new file",
      "type": "n8n-nodes-base.github",
      "position": [
        -1200,
        192
      ],
      "typeVersion": 1,
      "webhookId": "386c09c3-5fa0-4f28-b270-e52cb2f8f73d",
      "alwaysOutputData": false,
      "credentials": {
        "githubApi": {
          "id": "iY7L3YMNJ7qgBjXW",
          "name": "Token - [ d0t-J ]"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "value": "={{ $('Globals').item.json.repo.owner}}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Globals').item.json.repo.name }}",
          "mode": "name"
        },
        "filePath": "={{ $('Globals').item.json.repo.path }}{{ $('Loop Over Items').item.json.name }}/{{ $('Loop Over Items').item.json.name }}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{ $('Loop Over Items').item.json.id }} -{{ $('Loop Over Items').item.json.name }} ({{$json.github_status}})"
      },
      "id": "9744f20b-ecd1-491f-ab29-56e9b0ec1de7",
      "name": "Edit existing file",
      "type": "n8n-nodes-base.github",
      "position": [
        -1200,
        0
      ],
      "typeVersion": 1,
      "webhookId": "3d9aa79c-4b0e-448a-a2f7-e342a02234a7",
      "credentials": {
        "githubApi": {
          "id": "iY7L3YMNJ7qgBjXW",
          "name": "Token - [ d0t-J ]"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "={{ $json.repo.owner }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $json.repo.name }}",
          "mode": "name"
        },
        "filePath": "={{ $json.repo.path }}{{ $('Loop Over Items').item.json.name }}/{{ $('Loop Over Items').item.json.name }}.json",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "c18dd141-10d7-4a89-8e12-5c1534656ab1",
      "name": "Get file data",
      "type": "n8n-nodes-base.github",
      "position": [
        -2768,
        -224
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "webhookId": "1513f777-7c6b-4cba-a0e1-84b4566aaddd",
      "credentials": {
        "githubApi": {
          "id": "iY7L3YMNJ7qgBjXW",
          "name": "Token - [ d0t-J ]"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6cf546c5-5737-4dbd-851b-17d68e0a3780",
              "name": "repo.owner",
              "type": "string",
              "value": "d0t-J"
            },
            {
              "id": "452efa28-2dc6-4ea3-a7a2-c35d100d0382",
              "name": "repo.name",
              "type": "string",
              "value": "n8n-wf"
            },
            {
              "id": "81c4dc54-86bf-4432-a23f-22c7ea831e74",
              "name": "repo.path",
              "type": "string",
              "value": "=workflows/{{ $json.tags[0].name }}"
            }
          ]
        },
        "options": {}
      },
      "id": "2f1ec053-7f4d-4572-901f-35aebb775f4c",
      "name": "Globals",
      "type": "n8n-nodes-base.set",
      "position": [
        -2992,
        -224
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "12cad226-e091-4bbb-aed9-a8e01311772c",
              "name": "tags[0].name",
              "type": "string",
              "value": "={{ $('Loop Over Items').item.json.tags[0].name }}/"
            }
          ]
        },
        "options": {}
      },
      "id": "6e447169-7f53-4b6c-979e-f11aad358a0e",
      "name": "/",
      "type": "n8n-nodes-base.set",
      "position": [
        -3216,
        -224
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "operator": {
                      "type": "object",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "leftValue": "={{ $json.tags[0] }}",
                    "rightValue": "",
                    "id": "6d41447a-6514-4c24-a30c-78dd55f10e7c"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "tag"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "2656fbe3-fe35-4770-9c03-9a455ec618e4",
                    "operator": {
                      "type": "object",
                      "operation": "notExists",
                      "singleValue": true
                    },
                    "leftValue": "={{ $json.tags[0] }}",
                    "rightValue": ""
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "none"
            }
          ]
        },
        "options": {}
      },
      "id": "9c1d8250-ff51-4dc7-917f-4194d8cb0e43",
      "name": "tag?",
      "type": "n8n-nodes-base.switch",
      "position": [
        -3440,
        -224
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09CP6FNSES",
          "mode": "list",
          "cachedResultName": "social"
        },
        "text": "=:x: Failed to backup _{{ $('Loop Over Items').item.json.id }}_ - *{{ $('Loop Over Items').item.json.name }}*",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "id": "9b1dabcd-67e1-458a-a1de-19999842fc0f",
      "name": "Failed Flows",
      "type": "n8n-nodes-base.slack",
      "position": [
        -976,
        256
      ],
      "webhookId": "2a092edb-de12-490f-931b-34d70e7d7696",
      "typeVersion": 2.2,
      "credentials": {
        "slackOAuth2Api": {
          "id": "tkOMw6LTf1iDpxxB",
          "name": "OAuth - [ j.ahmed.ja7a7@gmail.com ]"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.github_status}}",
                    "rightValue": "same",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "e8601f6a-7b2a-45d7-9cec-084a72fc6438"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Same"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4d978b24-8f43-4924-ba0c-c1f00d413a79",
                    "leftValue": "",
                    "rightValue": "different",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Different"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "982dd831-ad62-450d-8ec4-701b81e0be3e",
                    "leftValue": "",
                    "rightValue": "new",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "New"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1632,
        -32
      ],
      "id": "efe37694-0a6e-4f62-9539-ce9b7151f132",
      "name": "Switch"
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 1,
      "position": [
        -3888,
        -144
      ],
      "id": "920c3ee8-547f-4b83-98dc-0dcb96b79eb3",
      "name": "Get many workflows",
      "credentials": {
        "n8nApi": {
          "id": "eo6P5MTbGWhy1lsK",
          "name": "n8n - [ j.ahmed.ja7a7@gmail.com ]"
        }
      }
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-22T13:12:40.595Z",
      "updatedAt": "2025-09-22T13:12:40.595Z",
      "role": "workflow:owner",
      "workflowId": "RY93B8ZVUx65YTsy",
      "projectId": "2lFcYqGDoW8pSvlN"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-09-22T17:51:51.000Z",
  "versionId": "8ee4acdd-f3de-40c7-aa76-7df28f5501ed"
}