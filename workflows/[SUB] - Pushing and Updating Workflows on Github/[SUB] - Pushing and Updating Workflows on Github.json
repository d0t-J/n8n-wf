{
  "active": false,
  "connections": {
    "Get File": {
      "main": [
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If file too large": {
      "main": [
        [
          {
            "node": "Get File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Items": {
      "main": [
        [
          {
            "node": "isDiffOrNew",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew": {
      "main": [
        [
          {
            "node": "Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status": {
      "main": [
        [
          {
            "node": "Same file - Do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is different",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is new",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Same file - Do nothing": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is different": {
      "main": [
        [
          {
            "node": "Edit existing file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is new": {
      "main": [
        [
          {
            "node": "Create new file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit existing file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get file data": {
      "main": [
        [
          {
            "node": "If file too large",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "tag?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Items",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Globals": {
      "main": [
        [
          {
            "node": "Get file data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "/": {
      "main": [
        [
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tag?": {
      "main": [
        [
          {
            "node": "/",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-18T16:44:10.907Z",
  "id": "rpQKZQhcrdfO9VZN",
  "isArchived": false,
  "meta": null,
  "name": "[SUB] - Pushing and Updating Workflows on Github",
  "nodes": [
    {
      "parameters": {
        "content": "## Subworkflow",
        "height": 732,
        "width": 3111,
        "color": 6
      },
      "id": "63e037d0-de45-4074-ad5a-6282297f6a81",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -496,
        -496
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "c15611e2-88a8-4c5c-bda0-47365d89b478",
      "name": "Return",
      "type": "n8n-nodes-base.set",
      "position": [
        2320,
        -112
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "url": "={{ $json.download_url }}",
        "options": {}
      },
      "id": "5c3cbb4f-65e9-49b3-9e68-6373f378d074",
      "name": "Get File",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        976,
        -256
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.content }}",
              "rightValue": ""
            },
            {
              "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "a7f83892-e2e0-47c6-bb04-c3386621408c",
      "name": "If file too large",
      "type": "n8n-nodes-base.if",
      "position": [
        752,
        -192
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "id": "56ece621-d76e-4bfb-816f-4f58b3fb1e9e",
      "name": "Merge Items",
      "type": "n8n-nodes-base.merge",
      "position": [
        1200,
        -112
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();"
      },
      "id": "4c163fdc-9ce7-4b2c-b077-619bfc070d5a",
      "name": "isDiffOrNew",
      "type": "n8n-nodes-base.code",
      "position": [
        1424,
        -112
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.github_status}}",
        "rules": {
          "rules": [
            {
              "value2": "same"
            },
            {
              "value2": "different",
              "output": 1
            },
            {
              "value2": "new",
              "output": 2
            }
          ]
        }
      },
      "id": "70f05d9a-6ec4-4b59-bde3-529dad2babcb",
      "name": "Check Status",
      "type": "n8n-nodes-base.switch",
      "position": [
        1648,
        -144
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "4887aaf6-43c5-4e53-95a3-be6d3d94ffcc",
      "name": "Same file - Do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        2096,
        -304
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "bfd1cf4c-1c37-422b-abfe-9ee18b92b5ae",
      "name": "File is different",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1872,
        -112
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "18b907b2-21e8-4bd3-9117-6537ee0f1ad7",
      "name": "File is new",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1872,
        80
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "={{ $('Globals').item.json.repo.owner }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Globals').item.json.repo.name }}",
          "mode": "name"
        },
        "filePath": "={{ $('Globals').item.json.repo.path }}{{$('When Executed by Another Workflow').first().json.name}}/{{$('When Executed by Another Workflow').first().json.name}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{ $('When Executed by Another Workflow').item.json.id }} - {{$('When Executed by Another Workflow').first().json.name}} ({{$json.github_status}})"
      },
      "id": "30669f6e-22e6-49b7-be4c-ad4b6a851eb6",
      "name": "Create new file",
      "type": "n8n-nodes-base.github",
      "position": [
        2096,
        80
      ],
      "typeVersion": 1,
      "webhookId": "386c09c3-5fa0-4f28-b270-e52cb2f8f73d",
      "credentials": {
        "githubApi": {
          "id": "iY7L3YMNJ7qgBjXW",
          "name": "[ Token ] - d0t-J"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "value": "={{ $('Globals').item.json.repo.owner}}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Globals').item.json.repo.name }}",
          "mode": "name"
        },
        "filePath": "={{ $('Globals').item.json.repo.path }}{{$('When Executed by Another Workflow').first().json.name}}/{{$('When Executed by Another Workflow').first().json.name}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{ $('When Executed by Another Workflow').item.json.id }} - {{$('When Executed by Another Workflow').first().json.name}} ({{$json.github_status}})"
      },
      "id": "fc472941-f9d5-41ca-a28c-ac51618e6580",
      "name": "Edit existing file",
      "type": "n8n-nodes-base.github",
      "position": [
        2096,
        -112
      ],
      "typeVersion": 1,
      "webhookId": "3d9aa79c-4b0e-448a-a2f7-e342a02234a7",
      "credentials": {
        "githubApi": {
          "id": "iY7L3YMNJ7qgBjXW",
          "name": "[ Token ] - d0t-J"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "={{ $json.repo.owner }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $json.repo.name }}",
          "mode": "name"
        },
        "filePath": "={{ $json.repo.path }}{{ $('When Executed by Another Workflow').item.json.name }}/{{ $('When Executed by Another Workflow').item.json.name }}.json",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "d238ac27-0953-49b5-8706-7087e1f12611",
      "name": "Get file data",
      "type": "n8n-nodes-base.github",
      "position": [
        528,
        -192
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "webhookId": "1513f777-7c6b-4cba-a0e1-84b4566aaddd",
      "credentials": {
        "githubApi": {
          "id": "iY7L3YMNJ7qgBjXW",
          "name": "[ Token ] - d0t-J"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -368,
        -112
      ],
      "id": "44e2f9fe-991d-4a02-a80f-60c34cd3c5cd",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6cf546c5-5737-4dbd-851b-17d68e0a3780",
              "name": "repo.owner",
              "type": "string",
              "value": "d0t-J"
            },
            {
              "id": "452efa28-2dc6-4ea3-a7a2-c35d100d0382",
              "name": "repo.name",
              "type": "string",
              "value": "n8n-wf"
            },
            {
              "id": "81c4dc54-86bf-4432-a23f-22c7ea831e74",
              "name": "repo.path",
              "type": "string",
              "value": "=workflows/{{ $json.tags[0].name }}"
            }
          ]
        },
        "options": {}
      },
      "id": "de364836-c903-4e74-80dc-c93d5379e9df",
      "name": "Globals",
      "type": "n8n-nodes-base.set",
      "position": [
        304,
        -192
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "12cad226-e091-4bbb-aed9-a8e01311772c",
              "name": "tags[0].name",
              "type": "string",
              "value": "={{ $('When Executed by Another Workflow').item.json.tags[0].name }}/"
            }
          ]
        },
        "options": {}
      },
      "id": "a52a5c9c-8519-4010-ae93-53af7b378625",
      "name": "/",
      "type": "n8n-nodes-base.set",
      "position": [
        80,
        -256
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "operator": {
                      "type": "object",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "leftValue": "={{ $json.tags[0] }}",
                    "rightValue": "",
                    "id": "6d41447a-6514-4c24-a30c-78dd55f10e7c"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "tag"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "2656fbe3-fe35-4770-9c03-9a455ec618e4",
                    "operator": {
                      "type": "object",
                      "operation": "notExists",
                      "singleValue": true
                    },
                    "leftValue": "={{ $json.tags[0] }}",
                    "rightValue": ""
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "none"
            }
          ]
        },
        "options": {}
      },
      "id": "c886ad18-c5fe-47d6-a4d1-04d77e7fe3bf",
      "name": "tag?",
      "type": "n8n-nodes-base.switch",
      "position": [
        -144,
        -192
      ],
      "typeVersion": 3.2
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-18T16:44:10.920Z",
      "updatedAt": "2025-09-18T16:44:10.920Z",
      "role": "workflow:owner",
      "workflowId": "rpQKZQhcrdfO9VZN",
      "projectId": "2lFcYqGDoW8pSvlN"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-09-18T16:53:39.000Z",
  "versionId": "a321d782-1b9b-42ae-9a72-12ee64b43d95"
}